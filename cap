#!/Users/ruoran/.pyenv/shims/python
import re
import sys
import pickle
import fileinput
from collections import Counter

from time import sleep
import threading



ch_left = ['a', 's', 'd', 'f', 'g', 'q', 'w', 'e', 'r', 't', 'z', 'x', 'c', 'v']
ch_right = ['h', 'j', 'k', 'l', 'y', 'u', 'i', 'o', 'p', 'n', 'm']


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def get_tokens():
    tuples = []
    for cl in ch_left:
        for cr in ch_right:
            tuples.append(cl + cr)
    return tuples

class TokenClass:
    tokens = get_tokens()
    index = 0  # current un-assigned token
    token_to_text = {}

def main():
    tsc = TokenClass()

    t_tty_reader = threading.Thread(target=tty_reader, args=(tsc,))
    t_pipe_reader = threading.Thread(target=pipe_reader, args=(tsc,))
    t_pipe_reader.start()
    sleep(0.1) # to let the existing 'tail' lines finish printing
    t_tty_reader.start()

def pipe_reader(tsc):
    for line in fileinput.input():
        process(line, tsc)
    with open("/tmp/cap.data", "wb") as f:
        pickle.dump(tsc.token_to_text, f) 


def tty_reader(tsc):
    read_fd = open("/dev/tty", "r")
    print(bcolors.OKBLUE + "type the token for the text to capture" + bcolors.ENDC)
    selection = read_fd.readline().strip().rstrip('\n')


    if selection not in tsc.token_to_text:
        print(bcolors.FAIL + "wrong token provided" + bcolors.ENDC)
        sys.exit(1)


    selected = tsc.token_to_text[selection]
    print(bcolors.OKGREEN + "selected: \n" + selected + bcolors.ENDC)

    with open("/tmp/selected.data", "wb") as f:
        pickle.dump(selected, f) 



def process(line, tsc):
    # remove consecutive white spaces
    line = re.sub(' +', ' ', line)

    chars = [c for c in line]

    tokens = tsc.tokens

    char_map = {}
    for char, count in Counter(chars).most_common():
        char_map[char] = count
    #print(char_map)


    for i, item in enumerate(line.split(' ')):
        len_diff = len(item) - len(tokens[tsc.index])

        if len_diff > 0:
            print(bcolors.WARNING + tokens[tsc.index] + ' ' * len_diff + bcolors.ENDC, end=" ")
        else:
            print(bcolors.WARNING + tokens[tsc.index] + bcolors.ENDC, end=" ")

        tsc.token_to_text[tokens[tsc.index]] = item
        tsc.index += 1

    print()
    for i, item in enumerate(line.split(' ')):
        len_diff = len(item) - len(tokens[tsc.index])

        if len_diff > 0:
            print(item, end=" ")
        else:
            len_diff = -1 * len_diff
            print(item + ' ' * len_diff, end=" ")

    print()


if __name__ == "__main__":
    main()


